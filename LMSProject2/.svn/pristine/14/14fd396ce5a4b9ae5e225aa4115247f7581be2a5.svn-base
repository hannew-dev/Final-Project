package kr.or.ddit.score.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.academic.vo.AcademicVO;
import kr.or.ddit.score.service.IScoreService;
import kr.or.ddit.score.vo.ScoreVO;
import kr.or.ddit.user.vo.StudentVO;
import kr.or.ddit.user.vo.UserVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/score")
public class ScoreController {
	
	
	@Inject 
	private IScoreService service;
	
	//등록 화면인데 필요할지...
//	@RequestMapping(value = "/register", method= RequestMethod.GET)
//	public String insertForm() throws Exception {
//		System.out.println("/score/register : GET 요청");
//		return "redirect:/score/list";
//	}
	
	//등록 처리 로직어케짤지 감도안옴..
	@RequestMapping(value = "/register", method = RequestMethod.POST)
    public String insert(ScoreVO score) throws Exception {
		log.info("insert()");
		System.out.println("/score/register : POST 요청");
        System.out.println("Scontroller param: " + score);
        service.insert(score);
        return "redirect:/score/list";
    }
	// 전체 학생 점수 조회..  교수가 볼 화면
	@RequestMapping(value = "/list", method = RequestMethod.GET)
    public String scoreList(Model model, StudentVO studentVO, AcademicVO academicVO) throws Exception {
		log.info("list()");
		System.out.println("/score/list : get 요청");
		//jsp에서 el태그로 써먹음
        model.addAttribute("sList", service.list());
        return "score/studentsScoreList";
	}
	//학생 점수 삭제 .. 교수가 하는일
	@RequestMapping(value = "/delete")
    public String delete(@RequestParam("stuId") int stuId, RedirectAttributes ra) throws Exception { //get으로 넘어오는 key명과 메서드의 파라미터 변수 명이 같으면 @RequestParam과 같은 역할을 한다.
		log.info("delete()");
		System.out.println(stuId + "<- 삭제되었습니다");
        service.delete(stuId);
        ra.addFlashAttribute("message","삭제 성공");
        return "redirect:/score/list";
    }
	// 이것의 용도는 무엇이었을까.. 아마도 selectOne 이었을 것이다.
	@RequestMapping(value = "/read", method = RequestMethod.GET)
    public String read(int stuId, Model model, HttpServletRequest request) throws Exception{
        log.info("read()");
        
        HttpSession session = request.getSession();
        
        System.out.println("read get요청!");
        ScoreVO score = service.read(stuId,session);
        model.addAttribute("score", score);
        return "redirect:/score/list";
    }

	//학생 점수 수정 화면
	@RequestMapping(value="/update", method = RequestMethod.GET)
	public String updateForm(int stuId, Model model, HttpServletRequest request) throws Exception{
		log.info("updateForm()");
		
		HttpSession session = request.getSession();
		
		ScoreVO score = service.read(stuId,session);
		model.addAttribute("score", score);
		model.addAttribute("status", "u");
		return "score/studentsScoreList";
	}
	
	//학생 점수 수정 처리
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String update(ScoreVO score) throws Exception {
		log.info("update()");
		System.out.println("/score/update : POST 요청");
		System.out.println("Scontroller param: " + score);
		service.update(score);
		return "redirect:/score/list";
	}
	
	//요청URI : /mylist
	//요청파라미터 : stuId=123456 (x)
	@RequestMapping(value = "/mylist", method = RequestMethod.GET)
    public String MyScoreList(Model model, StudentVO studentVO
    		, AcademicVO academicVO
    		, @RequestParam(value="stuId",required=false) String stuId
    		, HttpServletRequest request) throws Exception {
		log.info("mylist()");
		HttpSession session = request.getSession();
		//session.setAttribute("userInfo", student);
		UserVO userInfo = (UserVO) session.getAttribute("userInfo");
		String userId = userInfo.getUserId();
		
		log.info("userId : " + userId);
		
		System.out.println("/score/mylist : get 요청");
		//jsp에서 el태그로 써먹음
		ScoreVO score = service.read(userId,session);
		
        model.addAttribute("sList", service.list());
        
        
        
        model.addAttribute("score", score);
        return "score/studentScore";
	}
	
	@RequestMapping(value = "/mylistDetail", method = RequestMethod.GET)
    public String MyScoreListDetail(Model model, StudentVO studentVO
    		, AcademicVO academicVO
    		, @RequestParam(value="stuId",required=false) String stuId
    		, HttpServletRequest request) throws Exception {
		log.info("mylist()");
		HttpSession session = request.getSession();
		//session.setAttribute("userInfo", student);
		UserVO userInfo = (UserVO) session.getAttribute("userInfo");
		String userId = userInfo.getUserId();
		
		log.info("userId : " + userId);
		
		System.out.println("/score/mylist : get 요청");
		//jsp에서 el태그로 써먹음
		ScoreVO score = service.read(userId,session);
		
        model.addAttribute("sList", service.list());
        
        
        
        model.addAttribute("score", score);
        return "score/studentScoreDetail";
	}
	/*
	 * //학번으로 요청한 점수 조회 요청 메서드
	 * 
	 * @RequestMapping(value = "/selectOne", method = RequestMethod.GET) public
	 * String selectOne(String stuNum, Model model, RedirectAttributes ra) {
	 * //String으로 학번을 받아서 숫자말고 다른 문자 입력 하면 catch로가서 리다이렉트 메시지 출력 String result="";
	 * List<ScoreVO> list = service.selectAllScores(); //리스트에 없는 숫자 인지 확인을 위해
	 * selectAll 호출 해서 사이즈 구한다 try { int n = Integer.parseInt(stuNum);//정상적으로 받았으면
	 * stunum을 Integer.pareseint 형변환 if(n > list.size()) {
	 * ra.addFlashAttribute("msg","학번 정보가 없다"); result =
	 * "redirect:/score/studentsScoreList"; //사이즈보다 크면 리다이렉트 메시지 }else {
	 * model.addAttribute("stu",service.selectOne(n));
	 * model.addAttribute("stuNum",n); result = "score/studentsScoreList"; //아니면 정상
	 * selectOne리턴 }
	 * 
	 * } catch (Exception e) { System.out.println("cath : "+e.getMessage());
	 * ra.addFlashAttribute("msg", "숫자로만 입력하세요!"); result =
	 * "redirect:/score/studentsScoreList"; }
	 * 
	 * return result; }
	 */
}