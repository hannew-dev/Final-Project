package kr.or.ddit.course.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.common.ServiceResult;
import kr.or.ddit.common.vo.DepartmentVO;
import kr.or.ddit.course.service.ICourseService;
import kr.or.ddit.course.vo.CourseOpenVO;
import kr.or.ddit.course.vo.CourseVO;
import kr.or.ddit.user.vo.UserVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/course")
public class CourseController {

	@Autowired
	private ICourseService courseService;

	@RequestMapping(value = "/main", method = RequestMethod.GET)
	public String courseMain(HttpSession session, Model model) throws JsonProcessingException {

		UserVO userInfo = (UserVO) session.getAttribute("userInfo");
		String stuId = userInfo.getUserId();

		List<CourseOpenVO> courseOpenList = courseService.openList();
		List<DepartmentVO> deptList = courseService.deptInfoList();
		List<CourseVO> basketList = courseService.basketList(stuId);
		log.info(courseOpenList.toString());
		log.info(deptList.toString());
		
		ObjectMapper mapper = new ObjectMapper();
		
		String jsonString = mapper.writeValueAsString(basketList);
		log.info("파싱한 data: " + jsonString);

		model.addAttribute("courseOpenList", courseOpenList);
		model.addAttribute("deptList", deptList);
		model.addAttribute("basketList", basketList);
		model.addAttribute("basketJson", jsonString);

		return "course/courseMain";
	}

	@RequestMapping(value = "/apply", method = RequestMethod.POST)
	@ResponseBody
	public String courseApply(@RequestParam Map<String, Object> courseMap, HttpSession session) {
		log.info("courseMap: " + courseMap.toString());

		UserVO userInfo = (UserVO) session.getAttribute("userInfo");
		String stuId = userInfo.getUserId();
		courseMap.put("stuId", stuId);

		courseService.courseApply(courseMap);

		return "ok";
	}

	@RequestMapping(value = "/cancel", method = RequestMethod.POST)
	@ResponseBody
	public String courseCancel(@RequestParam Map<String, Object> courseMap, HttpSession session) {
		log.info("courseMap: " + courseMap.toString());
		UserVO userInfo = (UserVO) session.getAttribute("userInfo");
		String stuId = userInfo.getUserId();
		courseMap.put("stuId", stuId);
		
		courseService.courseCancel(courseMap);
		
		return "ok";
	}

	@RequestMapping(value = "/basketInsert", method = RequestMethod.POST)
	@ResponseBody
	public String basketInsert(@RequestParam Map<String, Object> courseMap, HttpSession session) {
		log.info("courseMap: " + courseMap.toString());
		ServiceResult result = null;
		
		UserVO userInfo = (UserVO) session.getAttribute("userInfo");
		String stuId = userInfo.getUserId();
		courseMap.put("stuId", stuId);
		
		result = courseService.basketInsert(courseMap);
		
		if(result.equals(ServiceResult.OK)) {
			return "ok";
		}else {
			return "fail";
		}
	}
	
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ResponseBody
	public List<CourseOpenVO> courseSearch(@RequestParam Map<String, Object> searchData){
		List<CourseOpenVO> courseList = courseService.courseSearch(searchData);
		
		return courseList;
	}
	
	@GetMapping("/deptSelect/{deptCode}")
	public ResponseEntity<List<CourseOpenVO>> deptSelect(@PathVariable String deptCode) {
		log.info("deptCode: " + deptCode);
	    List<CourseOpenVO> courseOpenList = courseService.getCourseOpenList(deptCode);
	    HttpStatus status = courseOpenList.isEmpty() ? HttpStatus.NO_CONTENT : HttpStatus.OK;
	    return new ResponseEntity<>(courseOpenList, status);
	}

}
